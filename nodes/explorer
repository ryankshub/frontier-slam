#!/usr/bin/env python3
#File for Explorer Node
#RKS

# Project imports

# Python imports

# 3rd-party imports
import actionlib
from actionlib_msgs.msg import GoalStatus
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from nav_msgs.msg import Odometry, OccupancyGrid
import rospy
import numpy as np
import cv2 as cv


class Explorer:
    """
    ROS Node responsible for navigating the robot inorder to explore a home

    SUBSCRIBERS
        odom nav_msgs/Odometry-
            The odometry of the robot, used to grab it's current
            location
        
        map nav_msgs/OccupancyGrid - 
            The occupancy grid of the map, used for exploration

    ACTION CLIENT:
        navi MoveBaseAction -
            Send a goal point for robot to traverse toward.
    """
    def __init__(self):
        """
        Constructor for ROS Node
        """
        rospy.init_node('explorer')
        self._navi_client= actionlib.SimpleActionClient("move_base", MoveBaseAction)
        self._navi_client.wait_for_server()
        self.goal_set = False
        self.x = None #We start with no clue where the robot is
        self.y = None #We start with no clue where the robot is
        self.past_x = None
        self.past_y = None
        self.stuck_count = 0
        self.STUCK_LIMIT = 5
        self.threshold = 0.001
        self.grid = None
        # Set up run rate and main function
        self._RATE = 15 # in Hz
        self._time_delta = 1./self._RATE
        rospy.Subscriber('/odom', Odometry, self._handle_odom)
        rospy.Subscriber('/map', OccupancyGrid, self._handle_map)
        rospy.Timer(rospy.Duration(self._time_delta), self.main_loop)
        rospy.spin()


    def _handle_odom(self, data):
        """
        Handles data from the Odometry topic
        to update the current idea of the robot's 
        position
        """
        self.past_x = self.x
        self.past_y = self.y
        self.x = data.pose.pose.position.x
        self.y = data.pose.pose.position.y


    def make_grid(self, rows, cols, datalist):
        """
        Convert single array to grid of shape
        (rows, cols) 
        """
        data_arr = np.array(datalist)
        data_mat = np.reshape(data_arr, (rows, cols))
        return data_mat


    def _handle_map(self, data):
        """
        Handles data from the Occupancy Grid
        """
        self.grid = self.make_grid(data.info.height, 
                                   data.info.width,
                                   data.data)
        self.resol = data.info.resolution
        self.origin = data.info.origin

    def random_walk(self):
        """
        Have the robot determine it's next point with
        random walk
        """
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        
        scale = np.random.randint(low=-2, high=2)
        y_diff = scale*np.random.rand()
        x_diff = scale*np.random.rand()
        goal.target_pose.pose.position.x = self.x + x_diff
        goal.target_pose.pose.position.y = self.y + y_diff
        goal.target_pose.pose.orientation.w = 1
        return goal

    def frontier_explore(self):
        rospy.loginfo("CALLED FE")
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        
        if self.grid is not None:
            binary_grid = self.grid == -1
            binary_grid = binary_grid.astype('uint8')*255
            contours, _ = cv.findContours(binary_grid,1,2)
            if len(contours) > 0:
                c = max(contours, key = cv.contourArea)
                M = cv.moments(c)
                cx = int(M['m10']/M['m00'])
                cy = int(M['m01']/M['m00'])
                x_diff = cx*self.resol
                y_diff = cy*self.resol
                goal.target_pose.pose.position.x = self.origin.position.x + x_diff
                goal.target_pose.pose.position.y = self.origin.position.y - y_diff
                goal.target_pose.pose.orientation.w = 1
                rospy.loginfo(f"{goal.target_pose.pose.position.x}")
                rospy.loginfo(f"{goal.target_pose.pose.position.y}")
            else:
                goal.target_pose.pose.position.x = self.x
                goal.target_pose.pose.position.y = self.y
                goal.target_pose.pose.orientation.w = 1
        else:
            goal.target_pose.pose.position.x = self.x
            goal.target_pose.pose.position.y = self.y
            goal.target_pose.pose.orientation.w = 1

        return goal


    def main_loop(self,event):
        """
        Main execution to calculate new point is current point as been reached
        """
        if (self.x is not None) and \
           (self.y is not None) and \
           (self.past_x is not None) and \
           (self.past_y is not None):
            # Get Check if robot is stuck 
            py = np.around(self.past_y, 4)
            px = np.around(self.past_x, 4)
            y = np.around(self.y, 4)
            x = np.around(self.x, 4)
            past_point = np.array(px, py)
            curr_point = np.array(x, y)
            mag = np.linalg.norm(past_point - curr_point)
            if mag < self.threshold:
                self.stuck_count += 1
            else:
                self.stuck_count = 0
            # Pick algorithm based on it robot is stuck
            if self.stuck_count >= self.STUCK_LIMIT:
                new_goal = self.random_walk()
                self.stuck_count = 0
                rospy.loginfo("I'M STUCK")
                self._navi_client.send_goal(new_goal)
                self._navi_client.wait_for_result(rospy.Duration(10.0))
                self._navi_client.cancel_all_goals()
            else:
                new_goal = self.frontier_explore()
                self._navi_client.send_goal(new_goal)
                self._navi_client.wait_for_result(rospy.Duration(3.0))
                self._navi_client.cancel_all_goals()


#Activate 'order_handler' node
def main():
    """
    Activation function for explorer
    """
    explorer = Explorer()

# Main Execution loop
if __name__ == "__main__":
    try:
        main()
    #If something kills this node, have it die
    except rospy.ROSInterruptException:
        pass
            
        


